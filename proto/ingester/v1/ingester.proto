syntax = "proto3";

package ingester.v1;

import "common/v1/common.proto";
import "push/v1/push.proto";

service IngesterService {
  rpc Push(push.v1.PushRequest) returns (push.v1.PushResponse) {}
  rpc LabelValues(LabelValuesRequest) returns (LabelValuesResponse) {}
  rpc ProfileTypes(ProfileTypesRequest) returns (ProfileTypesResponse) {}

  // Todo(ctovena) we might want to batch stream profiles & symbolization instead of sending them all at once.
  // but this requires to ensure we have correct timestamp and labels ordering.
  rpc SelectProfiles(SelectProfilesRequest) returns (SelectProfilesResponse) {}
  rpc SymbolizeStacktraces(SymbolizeStacktraceRequest) returns (SymbolizeStacktraceResponse) {}
}

message LabelValuesRequest {
  string name = 1;
}

message LabelValuesResponse {
  repeated string names = 1;
}

message ProfileTypesRequest {}

message ProfileTypesResponse {
  repeated string names = 1;
}

message SelectProfilesRequest {
  string labelSelector = 1;
  ProfileType type = 2;
  int64 start = 3;
  int64 end = 4;
}

message SelectProfilesResponse {
  repeated Profile profiles = 1;
}

// Profile represents a point in time profile.
message Profile {
  // The name and type of the profile.
  ProfileType type = 1;
  // LabelPair is the key value pairs to identify the corresponding profile
  repeated common.v1.LabelPair labels = 2;
  // Timestamp is when that profile was created
  int64 timestamp = 3;
  // The list of stracktraces for the profile with their respective value
  repeated StacktraceSample stacktraces = 4;
}

// ProfileType is the name and type of profile
message ProfileType {
  string name = 1;
  string sampleType = 2;
  string sampleUnit = 3;
  string periodType = 4;
  string periodUnit = 5;
}

message StacktraceSample {
  bytes ID = 1;
  int64 value = 2;
}

message SymbolizeStacktraceRequest {
  repeated bytes ids = 1;
}

message SymbolizeStacktraceResponse {
  repeated string function_names = 1;
  repeated Location locations = 2;
}

message Location {
  repeated int32 ids = 1;
}
