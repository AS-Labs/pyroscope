// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64

package ebpfspy

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type pyperfPidData struct {
	CurrentStateAddr  uint64
	TlsKeyAddr        uint64
	GilLockedAddr     uint64
	GilLastHolderAddr uint64
	Offsets           struct {
		PyObjectType            int64
		PyTypeObjectName        int64
		PyThreadStateFrame      int64
		PyThreadStateThread     int64
		PyFrameObjectBack       int64
		PyFrameObjectCode       int64
		PyFrameObjectLineno     int64
		PyFrameObjectLocalsplus int64
		PyCodeObjectFilename    int64
		PyCodeObjectName        int64
		PyCodeObjectVarnames    int64
		PyTupleObjectItem       int64
		StringData              int64
		StringSize              int64
	}
}

type pyperfPyEvent struct {
	Pid              uint32
	Tid              uint32
	Comm             [16]int8
	ThreadStateMatch uint8
	GilState         uint8
	PthreadIdMatch   uint8
	StackStatus      uint8
	_                [4]byte
	StackLen         int64
	Stack            [75]uint32
	_                [4]byte
}

type pyperfSampleStateT struct {
	Offsets struct {
		PyObjectType            int64
		PyTypeObjectName        int64
		PyThreadStateFrame      int64
		PyThreadStateThread     int64
		PyFrameObjectBack       int64
		PyFrameObjectCode       int64
		PyFrameObjectLineno     int64
		PyFrameObjectLocalsplus int64
		PyCodeObjectFilename    int64
		PyCodeObjectName        int64
		PyCodeObjectVarnames    int64
		PyTupleObjectItem       int64
		StringData              int64
		StringSize              int64
	}
	CurCpu                 uint64
	SymbolCounter          int64
	FramePtr               uint64
	PythonStackProgCallCnt int64
	Event                  pyperfPyEvent
}

type pyperfSymbol struct {
	Classname [32]int8
	Name      [64]int8
	File      [128]int8
}

// loadPyperf returns the embedded CollectionSpec for pyperf.
func loadPyperf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_PyperfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load pyperf: %w", err)
	}

	return spec, err
}

// loadPyperfObjects loads pyperf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*pyperfObjects
//	*pyperfPrograms
//	*pyperfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadPyperfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadPyperf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// pyperfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pyperfSpecs struct {
	pyperfProgramSpecs
	pyperfMapSpecs
}

// pyperfSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pyperfProgramSpecs struct {
	OnEvent         *ebpf.ProgramSpec `ebpf:"on_event"`
	ReadPythonStack *ebpf.ProgramSpec `ebpf:"read_python_stack"`
}

// pyperfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type pyperfMapSpecs struct {
	PyEvents      *ebpf.MapSpec `ebpf:"py_events"`
	PyPidConfig   *ebpf.MapSpec `ebpf:"py_pid_config"`
	PyProgs       *ebpf.MapSpec `ebpf:"py_progs"`
	PyStateHeap   *ebpf.MapSpec `ebpf:"py_state_heap"`
	PyStubsEvents *ebpf.MapSpec `ebpf:"py_stubs_events"`
	PySymbols     *ebpf.MapSpec `ebpf:"py_symbols"`
}

// pyperfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadPyperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type pyperfObjects struct {
	pyperfPrograms
	pyperfMaps
}

func (o *pyperfObjects) Close() error {
	return _PyperfClose(
		&o.pyperfPrograms,
		&o.pyperfMaps,
	)
}

// pyperfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadPyperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type pyperfMaps struct {
	PyEvents      *ebpf.Map `ebpf:"py_events"`
	PyPidConfig   *ebpf.Map `ebpf:"py_pid_config"`
	PyProgs       *ebpf.Map `ebpf:"py_progs"`
	PyStateHeap   *ebpf.Map `ebpf:"py_state_heap"`
	PyStubsEvents *ebpf.Map `ebpf:"py_stubs_events"`
	PySymbols     *ebpf.Map `ebpf:"py_symbols"`
}

func (m *pyperfMaps) Close() error {
	return _PyperfClose(
		m.PyEvents,
		m.PyPidConfig,
		m.PyProgs,
		m.PyStateHeap,
		m.PyStubsEvents,
		m.PySymbols,
	)
}

// pyperfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadPyperfObjects or ebpf.CollectionSpec.LoadAndAssign.
type pyperfPrograms struct {
	OnEvent         *ebpf.Program `ebpf:"on_event"`
	ReadPythonStack *ebpf.Program `ebpf:"read_python_stack"`
}

func (p *pyperfPrograms) Close() error {
	return _PyperfClose(
		p.OnEvent,
		p.ReadPythonStack,
	)
}

func _PyperfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed pyperf_bpfeb.o
var _PyperfBytes []byte
