// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package ebpfspy

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type ProfileBssArg struct {
	CollectUser   uint8
	CollectKernel uint8
}

type ProfilePyEvent struct {
	Pid         uint32
	StackStatus uint8
	_           [3]byte
	StackLen    int64
	Stack       [75]uint32
	_           [4]byte
}

type ProfilePyOffsetConfig struct {
	PyVarObjectObSize             int16
	PyObjectObType                int16
	PyTypeObjectTpName            int16
	PyThreadStateFrame            int16
	PyThreadStateCframe           int16
	PyCFrameCurrentFrame          int16
	PyCodeObjectCoFilename        int16
	PyCodeObjectCoName            int16
	PyCodeObjectCoVarnames        int16
	PyCodeObjectCoLocalsplusnames int16
	PyTupleObjectObItem           int16
	VFrameCode                    int16
	VFramePrevious                int16
	VFrameLocalsplus              int16
	StringSize                    int16
}

type ProfilePyPidData struct {
	Offsets ProfilePyOffsetConfig
	_       [2]byte
	Version struct {
		Major uint32
		Minor uint32
		Patch uint32
	}
	Musl   uint8
	_      [3]byte
	TssKey int32
}

type ProfilePySampleStateT struct {
	Offsets                ProfilePyOffsetConfig
	_                      [2]byte
	CurCpu                 uint32
	_                      [4]byte
	SymbolCounter          int64
	FramePtr               uint64
	PythonStackProgCallCnt int64
	Event                  ProfilePyEvent
}

type ProfilePySymbol struct {
	Classname [32]int8
	Name      [64]int8
	File      [128]int8
}

type ProfileSampleKey struct {
	Pid       uint32
	Flags     uint32
	KernStack int64
	UserStack int64
}

// LoadProfile returns the embedded CollectionSpec for Profile.
func LoadProfile() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ProfileBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Profile: %w", err)
	}

	return spec, err
}

// LoadProfileObjects loads Profile and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*ProfileObjects
//	*ProfilePrograms
//	*ProfileMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadProfileObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadProfile()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// ProfileSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ProfileSpecs struct {
	ProfileProgramSpecs
	ProfileMapSpecs
}

// ProfileSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ProfileProgramSpecs struct {
	DoPerfEvent     *ebpf.ProgramSpec `ebpf:"do_perf_event"`
	PyperfCollect   *ebpf.ProgramSpec `ebpf:"pyperf_collect"`
	ReadPythonStack *ebpf.ProgramSpec `ebpf:"read_python_stack"`
}

// ProfileMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type ProfileMapSpecs struct {
	Args        *ebpf.MapSpec `ebpf:"args"`
	Counts      *ebpf.MapSpec `ebpf:"counts"`
	PyEvents    *ebpf.MapSpec `ebpf:"py_events"`
	PyPidConfig *ebpf.MapSpec `ebpf:"py_pid_config"`
	PyProgs     *ebpf.MapSpec `ebpf:"py_progs"`
	PyStateHeap *ebpf.MapSpec `ebpf:"py_state_heap"`
	PySymbols   *ebpf.MapSpec `ebpf:"py_symbols"`
	Stacks      *ebpf.MapSpec `ebpf:"stacks"`
}

// ProfileObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadProfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type ProfileObjects struct {
	ProfilePrograms
	ProfileMaps
}

func (o *ProfileObjects) Close() error {
	return _ProfileClose(
		&o.ProfilePrograms,
		&o.ProfileMaps,
	)
}

// ProfileMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadProfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type ProfileMaps struct {
	Args        *ebpf.Map `ebpf:"args"`
	Counts      *ebpf.Map `ebpf:"counts"`
	PyEvents    *ebpf.Map `ebpf:"py_events"`
	PyPidConfig *ebpf.Map `ebpf:"py_pid_config"`
	PyProgs     *ebpf.Map `ebpf:"py_progs"`
	PyStateHeap *ebpf.Map `ebpf:"py_state_heap"`
	PySymbols   *ebpf.Map `ebpf:"py_symbols"`
	Stacks      *ebpf.Map `ebpf:"stacks"`
}

func (m *ProfileMaps) Close() error {
	return _ProfileClose(
		m.Args,
		m.Counts,
		m.PyEvents,
		m.PyPidConfig,
		m.PyProgs,
		m.PyStateHeap,
		m.PySymbols,
		m.Stacks,
	)
}

// ProfilePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadProfileObjects or ebpf.CollectionSpec.LoadAndAssign.
type ProfilePrograms struct {
	DoPerfEvent     *ebpf.Program `ebpf:"do_perf_event"`
	PyperfCollect   *ebpf.Program `ebpf:"pyperf_collect"`
	ReadPythonStack *ebpf.Program `ebpf:"read_python_stack"`
}

func (p *ProfilePrograms) Close() error {
	return _ProfileClose(
		p.DoPerfEvent,
		p.PyperfCollect,
		p.ReadPythonStack,
	)
}

func _ProfileClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed profile_bpfel_arm64.o
var _ProfileBytes []byte
